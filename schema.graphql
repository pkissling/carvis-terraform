type Car {
  id: ID!
  brand: String!
  type: String!
  modelSeries: String!
  modelYear: String!
  modelDetails: String!
  bodyType: String!
  capacity: String!
  horsePower: Float!
  transmission: String!
  countryOfOrigin: String
  colorExterior: String!
  colorExteriorManufacturer: String!
  colorAndMaterialInterior: String!
  mileage: Float!
  vin: String
  additionalEquipment: String
  condition: String!
  shortDescription: String
  description: String
  price: Float
  ads: [String]
  ownerUsername: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CarConnection {
  items: [Car]
  nextToken: String
}

input CreateCarInput {
  brand: String!
  type: String!
  modelSeries: String!
  modelYear: String!
  modelDetails: String!
  bodyType: String!
  capacity: String!
  horsePower: Float!
  transmission: String!
  countryOfOrigin: String
  colorExterior: String!
  colorExteriorManufacturer: String!
  colorAndMaterialInterior: String!
  mileage: Float!
  vin: String
  additionalEquipment: String
  condition: String!
  shortDescription: String
  description: String
  price: Float
  ads: [String]
}

type Mutation {
  createCar(input: CreateCarInput!): Car
  updateCar(input: UpdateCarInput!): Car
  deleteCar(id: ID!): Car
}

type Query {
  getCar(id: ID!): Car
  listCars(filter: TableCarFilterInput, limit: Int, nextToken: String): CarConnection
}

type Subscription {
  onCreateCar(
    id: ID,
    brand: String,
    color: String,
    mileage: String,
    username: String
  ): Car
    @aws_subscribe(mutations: ["createCar"])
  onUpdateCar(
    id: ID,
    brand: String,
    color: String,
    mileage: String,
    username: String
  ): Car
    @aws_subscribe(mutations: ["updateCar"])
  onDeleteCar(
    id: ID,
    brand: String,
    color: String,
    mileage: String,
    username: String
  ): Car
    @aws_subscribe(mutations: ["deleteCar"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableCarFilterInput {
  id: TableIDFilterInput
  brand: TableStringFilterInput
  color: TableStringFilterInput
  mileage: TableStringFilterInput
  username: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input UpdateCarInput {
  id: ID!
  brand: String
  color: String
  mileage: String
  username: String
}